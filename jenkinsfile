pipeline {
    agent any
    
    tools {
        nodejs 'node-19'
    }
    
    environment {
        BUILD_VERSION = "${env.BUILD_NUMBER}"
        ARTIFACT_NAME = "web-server-${BUILD_VERSION}.tar.gz"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing Node.js dependencies...'
                sh 'npm install'
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                echo 'Running code quality analysis...'
                
                // Create reports directory
                sh 'mkdir -p reports'
                
                // Run ESLint for code quality
                script {
                    try {
                        sh 'npm run lint'
                        echo 'ESLint analysis completed!'
                    } catch (Exception e) {
                        echo 'ESLint found issues, but continuing...'
                        currentBuild.result = 'UNSTABLE'
                    }
                }
                
                // Generate HTML report
                sh 'npm run lint:report'
                
                // Display lint results summary
                script {
                    if (fileExists('lint-results.json')) {
                        def lintResults = readFile('lint-results.json')
                        def results = readJSON text: lintResults
                        def errorCount = 0
                        def warningCount = 0
                        
                        results.each { file ->
                            errorCount += file.errorCount
                            warningCount += file.warningCount
                        }
                        
                        echo "Code Quality Summary:"
                        echo "- Errors: ${errorCount}"
                        echo "- Warnings: ${warningCount}"
                        echo "- Files analyzed: ${results.size()}"
                        
                        if (errorCount > 0) {
                            currentBuild.result = 'UNSTABLE'
                            echo "Code quality issues found! Check the reports."
                        }
                    }
                }
            }

            
            post {
                always {
                    // Archive lint reports
                    archiveArtifacts artifacts: 'lint-*.json,lint-*.html', allowEmptyArchive: true
                }
            }
        }
        
        stage('Test') {
            steps {
                echo 'Running automated tests...'
                
                sh 'mkdir -p test-results'
                
                script {
                    try {
                        sh 'npm run test:unit'
                        echo 'Unit tests passed!'
                    } catch (Exception e) {
                        echo 'Unit tests failed!'
                        currentBuild.result = 'UNSTABLE'
                    }
                }
                
                script {
                    try {
                        sh 'npm run test:integration'
                        echo 'Integration tests passed!'
                    } catch (Exception e) {
                        echo 'Integration tests failed!'
                        currentBuild.result = 'UNSTABLE'
                    }
                }
                
                sh 'npm run test:ci'
            }
            post {
                always {
                    // Archive coverage data
                    archiveArtifacts artifacts: 'coverage/**/*', allowEmptyArchive: true
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building application...'
                
                sh 'npm run clean'
                sh 'mkdir -p dist'
                
                sh '''
                    cp *.js dist/ || echo "No JS files to copy"
                    cp package.json dist/
                    cp package-lock.json dist/ || echo "No package-lock.json found"
                '''
                
                sh 'npm install --production --prefix dist'
                
                sh '''
                    cd dist
                    tar -czf ../web-server-${BUILD_NUMBER}.tar.gz .
                    cd ..
                '''
                
                echo "Build artifact created: web-server-${BUILD_NUMBER}.tar.gz"
            }
        }
        
        stage('Archive Artifacts') {
            steps {
                echo 'Archiving build artifacts...'
                
                archiveArtifacts artifacts: 'web-server-*.tar.gz', fingerprint: true
                archiveArtifacts artifacts: 'dist/**/*', allowEmptyArchive: true
                
                sh '''
                    echo "Build Number: ${BUILD_NUMBER}" > build-info.txt
                    echo "Build Date: $(date)" >> build-info.txt
                    echo "Git Commit: ${GIT_COMMIT}" >> build-info.txt
                    echo "Node Version: $(node --version)" >> build-info.txt
                    echo "NPM Version: $(npm --version)" >> build-info.txt
                    echo "Tests: Completed" >> build-info.txt
                    echo "Code Quality: Analyzed with ESLint" >> build-info.txt
                '''
                
                archiveArtifacts artifacts: 'build-info.txt', fingerprint: true
            }
        }

        stage('Security Stage') {
            steps {
                echo 'Running security stage'

                //running security and saving out as a json file
                sh 'npm audit --json > security-audit.json ||true'

                //reading and parsing the json 
                script {
                    if (fileExists('security-audit.json')){
                        def auditResults = readJson file: 'security-audit.json'
                        def totalVulns = auditResults.metadata.vulnerabilities.total 

                        //checking how many high vulnerabilities do we have 
                        def highVulns = auditResults.metadata.vulnerabilities.high


                        echo "Security Scan Results:"
                        echo "- Total vulnerabilities: ${totalVulns}"
                        echo "- High severities: ${highVulns}"


                    }
                }

            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            sh 'rm -rf dist'
            
            // Publish build summary
            script {
                def buildStatus = currentBuild.result ?: 'SUCCESS'
                echo "Pipeline completed with status: ${buildStatus}"
                
                if (fileExists('lint-results.json')) {
                    echo "Code quality report available in build artifacts"
                }
                
                if (fileExists('coverage/lcov-report/index.html')) {
                    echo "Test coverage report available in build artifacts"
                }
            }
        }
        success {
            echo "Build, tests, and code quality checks successful!"
        }
        failure {
            echo 'Pipeline failed!'
        }
        unstable {
            echo 'Pipeline completed but with quality issues!'
        }
    }
}