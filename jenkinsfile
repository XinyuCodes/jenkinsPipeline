pipeline {
    agent any
    
    tools {
        nodejs 'node-19'
    }
    
    environment {
        BUILD_VERSION = "${env.BUILD_NUMBER}"
        ARTIFACT_NAME = "web-server-${BUILD_VERSION}.tar.gz"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing Node.js dependencies...'
                sh 'npm install'
            }
        }
        
        stage('Test') {
            steps {
                echo 'Running automated tests...'
                
                // Create test results directory
                sh 'mkdir -p test-results'
                
                // Run unit tests
                script {
                    try {
                        sh 'npm run test:unit'
                        echo 'Unit tests passed!'
                    } catch (Exception e) {
                        echo 'Unit tests failed!'
                        currentBuild.result = 'UNSTABLE'
                    }
                }
                
                // Run integration tests
                script {
                    try {
                        sh 'npm run test:integration'
                        echo 'Integration tests passed!'
                    } catch (Exception e) {
                        echo 'Integration tests failed!'
                        currentBuild.result = 'UNSTABLE'
                    }
                }
                
                // Run all tests with coverage for CI
                sh 'npm run test:ci'
            }
            post {
                always {
                    // Publish test results (if you want detailed reporting)
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'coverage/lcov-report',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                    
                    // Archive coverage data
                    archiveArtifacts artifacts: 'coverage/**/*', allowEmptyArchive: true
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building application...'
                
                sh 'npm run clean'
                sh 'mkdir -p dist'
                
                sh '''
                    cp *.js dist/ || echo "No JS files to copy"
                    cp package.json dist/
                    cp package-lock.json dist/ || echo "No package-lock.json found"
                '''
                
                sh 'npm install --production --prefix dist'
                
                sh '''
                    cd dist
                    tar -czf ../web-server-${BUILD_NUMBER}.tar.gz .
                    cd ..
                '''
                
                echo "Build artifact created: web-server-${BUILD_NUMBER}.tar.gz"
            }
        }
        
        stage('Archive Artifacts') {
            steps {
                echo 'Archiving build artifacts...'
                
                archiveArtifacts artifacts: 'web-server-*.tar.gz', fingerprint: true
                archiveArtifacts artifacts: 'dist/**/*', allowEmptyArchive: true
                
                sh '''
                    echo "Build Number: ${BUILD_NUMBER}" > build-info.txt
                    echo "Build Date: $(date)" >> build-info.txt
                    echo "Git Commit: ${GIT_COMMIT}" >> build-info.txt
                    echo "Node Version: $(node --version)" >> build-info.txt
                    echo "NPM Version: $(npm --version)" >> build-info.txt
                    echo "Test Results: Tests completed successfully" >> build-info.txt
                '''
                
                archiveArtifacts artifacts: 'build-info.txt', fingerprint: true
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            sh 'rm -rf dist'
        }
        success {
            echo "Build and tests successful! Artifact: web-server-${BUILD_NUMBER}.tar.gz"
        }
        failure {
            echo 'Build or tests failed!'
        }
        unstable {
            echo 'Build completed but some tests failed!'
        }
    }
}